#! /usr/bin/python
import naf
from random import randint

HAMMING = [
	(0, 0, 0), (1, 0, 0), (1, 0, 0), (2, 0, 0), (1, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0),
	(1, 0, 0), (2, 0, 0), (2, 0, 0), (3, 0, 0), (2, 0, 0), (3, 0, 0), (2, 0, 0), (2, 0, 0),
	(1, 0, 0), (2, 0, 0), (2, 0, 0), (3, 0, 0), (2, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0),
	(2, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (2, 0, 0), (3, 0, 0), (2, 0, 0), (2, 0, 0),
	(1, 0, 0), (2, 0, 0), (2, 0, 0), (3, 0, 0), (2, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0),
	(2, 0, 0), (3, 0, 0), (3, 0, 0), (4, 0, 0), (3, 0, 0), (4, 0, 0), (3, 0, 0), (3, 0, 0),
	(2, 0, 0), (3, 0, 0), (3, 0, 0), (4, 0, 0), (3, 0, 0), (4, 0, 0), (3, 0, 0), (3, 0, 0),
	(2, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (2, 0, 0), (3, 0, 0), (2, 0, 0), (2, 0, 0),
	(1, 0, 0), (2, 0, 0), (2, 0, 0), (3, 0, 0), (2, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0),
	(2, 0, 0), (3, 0, 0), (3, 0, 0), (4, 0, 0), (3, 0, 0), (4, 0, 0), (3, 0, 0), (3, 0, 0),
	(2, 0, 0), (3, 0, 0), (3, 0, 0), (4, 0, 0), (3, 0, 0), (4, 0, 0), (4, 0, 1), (4, 0, 1),
	(3, 0, 1), (4, 0, 1), (4, 0, 1), (4, 0, 1), (3, 0, 1), (4, 0, 1), (3, 0, 1), (3, 0, 1),
	(2, 0, 1), (3, 0, 1), (3, 0, 1), (4, 0, 1), (3, 0, 1), (4, 0, 1), (4, 0, 1), (4, 0, 1),
	(3, 0, 1), (4, 0, 1), (4, 0, 1), (4, 0, 1), (3, 0, 1), (4, 0, 1), (3, 0, 1), (3, 0, 1),
	(2, 0, 1), (3, 0, 1), (3, 0, 1), (4, 0, 1), (3, 0, 1), (4, 0, 1), (3, 0, 1), (3, 0, 1),
	(2, 0, 1), (3, 0, 1), (3, 0, 1), (3, 0, 1), (2, 0, 1), (3, 0, 1), (2, 0, 1), (2, 0, 1),
	(1, 0, 1), (2, 0, 1), (2, 0, 1), (3, 0, 1), (2, 0, 1), (3, 0, 1), (3, 0, 1), (3, 0, 1),
	(2, 0, 1), (3, 0, 1), (3, 0, 1), (4, 0, 1), (3, 0, 1), (4, 0, 1), (3, 0, 1), (3, 0, 1),
	(2, 0, 1), (3, 0, 1), (3, 0, 1), (4, 0, 1), (3, 0, 1), (4, 0, 1), (4, 0, 1), (4, 0, 1),
	(3, 0, 1), (4, 0, 1), (4, 0, 1), (4, 0, 1), (3, 0, 1), (4, 0, 1), (3, 0, 1), (3, 0, 1),
	(2, 0, 1), (3, 0, 1), (3, 0, 1), (4, 0, 1), (3, 0, 1), (4, 0, 1), (4, 0, 1), (4, 0, 1),
	(3, 0, 1), (4, 0, 1), (4, 0, 1), (4, 1, 0), (3, 1, 0), (4, 1, 0), (3, 1, 0), (3, 1, 0),
	(2, 1, 0), (3, 1, 0), (3, 1, 0), (4, 1, 0), (3, 1, 0), (4, 1, 0), (3, 1, 0), (3, 1, 0),
	(2, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (2, 1, 0), (3, 1, 0), (2, 1, 0), (2, 1, 0),
	(1, 1, 0), (2, 1, 0), (2, 1, 0), (3, 1, 0), (2, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0),
	(2, 1, 0), (3, 1, 0), (3, 1, 0), (4, 1, 0), (3, 1, 0), (4, 1, 0), (3, 1, 0), (3, 1, 0),
	(2, 1, 0), (3, 1, 0), (3, 1, 0), (4, 1, 0), (3, 1, 0), (4, 1, 0), (3, 1, 0), (3, 1, 0),
	(2, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (2, 1, 0), (3, 1, 0), (2, 1, 0), (2, 1, 0),
	(1, 1, 0), (2, 1, 0), (2, 1, 0), (3, 1, 0), (2, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0),
	(2, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (2, 1, 0), (3, 1, 0), (2, 1, 0), (2, 1, 0),
	(1, 1, 0), (2, 1, 0), (2, 1, 0), (3, 1, 0), (2, 1, 0), (3, 1, 0), (2, 1, 0), (2, 1, 0),
	(1, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (1, 1, 0), (2, 1, 0), (1, 1, 0), (1, 1, 0)
]


def ham(a):
	if a < 0:
		a = 0 - a
	h = 0
	l = []
	tmp = (0, 0, 0)
	old = 0
	old_naf = 0
	t = 0
	while a != 0:
		a += tmp[1]
		p = a & 0xff
		if (tmp[1] == 0 and old_naf == 1 and p % 2 == 1):
			p += 1
		"""if (tmp[1] == 0 and old_naf == 1 and p % 2 == 1):
			p += 1
			print "naf"
		"""
		old = p >> 7
		#print p
		if p == 256:
			p = 0
			t = 1
		tmp = HAMMING[p]
		old_naf = tmp[2]
		n, h1 = hamming_NAF(p)
		h += tmp[0]
		l.append([tmp[0], tmp[1], tmp[2], n])
		a >>= 8
		if t == 1:
			a += 1
			t = 0
	if tmp[1] == 1:
		h += 1
	return h, l[::-1]

def change(l):
	ch = ""
	for i in l:
		if i == 0:
			ch = '0' + ch
		elif i == 1:
			ch = '1' + ch
		elif i == -1:
			ch = '-' + ch
	return ch

def hamming_NAF(d):
	h = 0
	ch = ""
	if d != 0:
		if d < 0:
			d = 0 - d
		while d > 0:
			if d & 1 == 1:
				d_i = 2-(d%4)
				d = d - d_i
				if d_i == 1:
					ch += "+"
				elif d_i == -1:
					ch += "-"
				elif d_i == 0:
					ch += "0"
			else:
				ch += "0"
				d_i = 0
			d /= 2
			if d_i != 0:
				h += 1
	return ch, h

i = 0
l = []
ints = [
	3037453594, 2156880573, 3122465164, 3672898566,
	2619183785, 2542338365, 2947693759, 3229247823, 
	3521839772, 3712678680
	]
for compteur in range(10000):
	#print "-"*40
	r = randint(2**31, 2**32)
	na, h1 = hamming_NAF(r)
	na = na[::-1]
	h2, L = ham(r)
	#print L
	if h1 != h2:
		ch = bin(r)[2:]
		print ch
		if len(na) == 32:
			print "", ch[:8], ch[8:16], ch[16:24], ch[24:32], h1, h2
			print ""+na[:8]+"  "+na[8:16]+"  "+na[16:24]+"  "+na[24:32]
			for x in L:
				t = x[3][::-1] 
				print "0"*(9-len(t))+t,
			print ""
			for x in L:
				print x[0:3],
			print ""

		else:
			print "-"*40
			print "", ch[:8], ch[8:16], ch[16:24], ch[24:32], h1, h2
			print ""+na[:9]+"  "+na[9:17]+"  "+na[17:25]+"  "+na[25:33]
			for x in L:
				t = x[3][::-1] 
				print "0"*(9-len(t))+t, 
			print ""
			for x in L:
				print x[0:3],
			print ""
	else: 
		l.append([r, na, L])
	i += 1
#print "="*36

for i in l:
	ch = bin(i[0])[2:]
	na = i[1]
	L = i[2]
	#print "ok :)"
	"""
	if len(na) == 32:
		print "-"*40
		print "", ch[:8], ch[8:16], ch[16:24], ch[24:32], h1, h2
		print ""+na[:8]+"  "+na[8:16]+"  "+na[16:24]+"  "+na[24:32]
		for x in L:
			t = x[3][::-1] 
			print "0"*(9-len(t))+t, 
		print ""

	else:
		print "-"*40
		print "", ch[:8], ch[8:16], ch[16:24], ch[24:32], h1, h2
		print ""+na[:9]+"  "+na[9:17]+"  "+na[17:25]+"  "+na[25:33]
		for x in L:
			t = x[3][::-1] 
			print "0"*(9-len(t))+t, 
		print ""
	"""
		